
memory-game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000960  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000001f7  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000038  00000000  00000000  00000dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000276  00000000  00000000  00000de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021d  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000105  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000147  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	22 d0       	rcall	.+68     	; 0x70 <main>
  2c:	d7 c0       	rjmp	.+430    	; 0x1dc <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <led_display>:
 * LEDS, MUST be on pins 0, 1 and 2 on any PORT. However, this can be changed by
 * changing the encodings.
 */
uint8_t led_display(uint8_t state)
{
    switch (state) {
  30:	82 30       	cpi	r24, 0x02	; 2
  32:	51 f0       	breq	.+20     	; 0x48 <__SREG__+0x9>
  34:	83 30       	cpi	r24, 0x03	; 3
  36:	18 f4       	brcc	.+6      	; 0x3e <__SP_H__>
  38:	81 30       	cpi	r24, 0x01	; 1
  3a:	71 f4       	brne	.+28     	; 0x58 <__SREG__+0x19>
  3c:	07 c0       	rjmp	.+14     	; 0x4c <__SREG__+0xd>
  3e:	84 30       	cpi	r24, 0x04	; 4
  40:	39 f0       	breq	.+14     	; 0x50 <__SREG__+0x11>
  42:	88 30       	cpi	r24, 0x08	; 8
  44:	49 f4       	brne	.+18     	; 0x58 <__SREG__+0x19>
  46:	06 c0       	rjmp	.+12     	; 0x54 <__SREG__+0x15>
  48:	85 e0       	ldi	r24, 0x05	; 5
  4a:	08 95       	ret
  4c:	82 e0       	ldi	r24, 0x02	; 2
  4e:	08 95       	ret
  50:	84 e0       	ldi	r24, 0x04	; 4
  52:	08 95       	ret
        break;
    case 0x02:
        return 0x05;
        break;
    case 0x04:
        return 0x04;
  54:	83 e0       	ldi	r24, 0x03	; 3
  56:	08 95       	ret
        break;
    case 0x08:
        return 0x03;
  58:	80 e0       	ldi	r24, 0x00	; 0
        break;
    default:
        return 0x00;
        break;
    }
}
  5a:	08 95       	ret

0000005c <rand_lcg>:
// is constantly fedback into the function when a new random number is desired. 
// Needs some initial seed value.
//
// m, a and c need to be chosen carefully
uint16_t rand_lcg(uint16_t lcg_previous, uint16_t m, uint16_t a, uint16_t c)
{
  5c:	fc 01       	movw	r30, r24
  5e:	db 01       	movw	r26, r22
  60:	ca 01       	movw	r24, r20
  62:	bf 01       	movw	r22, r30
  64:	6f d0       	rcall	.+222    	; 0x144 <__mulhi3>
  66:	82 0f       	add	r24, r18
  68:	93 1f       	adc	r25, r19
  6a:	bd 01       	movw	r22, r26
  6c:	7d d0       	rcall	.+250    	; 0x168 <__udivmodhi4>
    return (lcg_previous*a + c) % m;
}
  6e:	08 95       	ret

00000070 <main>:

uint8_t led_display(uint8_t state);
uint16_t rand_lcg(uint16_t lcg_previous, uint16_t m, uint16_t a, uint16_t c);

int main (void)
{
  70:	6f 92       	push	r6
  72:	7f 92       	push	r7
  74:	8f 92       	push	r8
  76:	9f 92       	push	r9
  78:	af 92       	push	r10
  7a:	bf 92       	push	r11
  7c:	cf 92       	push	r12
  7e:	df 92       	push	r13
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	c4 56       	subi	r28, 0x64	; 100
  92:	d0 40       	sbci	r29, 0x00	; 0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
    // Current game state... Create an enum for better state names
    //  uint8_t state = 0x00;
    
    // Setup random number generator
    // Need a better way to obtain a seed (maybe noise off a zener diode?
    uint16_t random = eeprom_read_word((uint16_t *) 46); // seed by placing whatevr junk is already in random into random 
  9e:	8e e2       	ldi	r24, 0x2E	; 46
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	76 d0       	rcall	.+236    	; 0x190 <__eerd_word_tn85>
  a4:	6c 01       	movw	r12, r24

    uint8_t moves[MAX_MOVES]; // Previous move the game makes
    uint8_t player_moves[MAX_MOVES]; // Array where use moves are written
    DDRB = 0x07; // Set up pins 0, 1 and 2 to be outputs
  a6:	87 e0       	ldi	r24, 0x07	; 7
  a8:	87 bb       	out	0x17, r24	; 23
    PORTB = 0x00; // Set all pins off by default
  aa:	18 ba       	out	0x18, r1	; 24
  ac:	ee 24       	eor	r14, r14
  ae:	ff 24       	eor	r15, r15
        // Get a new random number from the lcg
        random = rand_lcg(random, MAX_PERIOD, MULTIPLIER, C ); 
        eeprom_write_word((uint16_t *)46, random); // Store last random value in the EEPROM for next seed, if reset occurs
        // Store this move into memory. First shift rand over and only take the
        // two most significant bits.
        moves[counter] = 0x01 << (random >> 13);
  b0:	4e 01       	movw	r8, r28
  b2:	08 94       	sec
  b4:	81 1c       	adc	r8, r1
  b6:	91 1c       	adc	r9, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b8:	99 e1       	ldi	r25, 0x19	; 25
  ba:	a9 2e       	mov	r10, r25
  bc:	b1 2c       	mov	r11, r1
    
    uint16_t counter = 0; // main counter
    uint16_t i; // internal counter
    while (1) {
        // Get a new random number from the lcg
        random = rand_lcg(random, MAX_PERIOD, MULTIPLIER, C ); 
  be:	88 ea       	ldi	r24, 0xA8	; 168
  c0:	68 2e       	mov	r6, r24
  c2:	81 e6       	ldi	r24, 0x61	; 97
  c4:	78 2e       	mov	r7, r24
  c6:	c6 01       	movw	r24, r12
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	70 e8       	ldi	r23, 0x80	; 128
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	52 e0       	ldi	r21, 0x02	; 2
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	c3 df       	rcall	.-122    	; 0x5c <rand_lcg>
  d6:	6c 01       	movw	r12, r24
        eeprom_write_word((uint16_t *)46, random); // Store last random value in the EEPROM for next seed, if reset occurs
  d8:	8e e2       	ldi	r24, 0x2E	; 46
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	b6 01       	movw	r22, r12
  de:	5d d0       	rcall	.+186    	; 0x19a <__eewr_word_tn85>
        // Store this move into memory. First shift rand over and only take the
        // two most significant bits.
        moves[counter] = 0x01 << (random >> 13);
  e0:	f4 01       	movw	r30, r8
  e2:	ee 0d       	add	r30, r14
  e4:	ff 1d       	adc	r31, r15
  e6:	2d 2d       	mov	r18, r13
  e8:	22 95       	swap	r18
  ea:	26 95       	lsr	r18
  ec:	27 70       	andi	r18, 0x07	; 7
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x88>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	2a 95       	dec	r18
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <main+0x84>
  fc:	80 83       	st	Z, r24
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	10 e0       	ldi	r17, 0x00	; 0
        
        
        for(i = 0; i <= counter; i++) {
            PORTB = led_display(moves[i]); // Translate the state encoding to something 
 102:	f4 01       	movw	r30, r8
 104:	e0 0f       	add	r30, r16
 106:	f1 1f       	adc	r31, r17
 108:	80 81       	ld	r24, Z
 10a:	92 df       	rcall	.-220    	; 0x30 <led_display>
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	88 e8       	ldi	r24, 0x88	; 136
 110:	93 e1       	ldi	r25, 0x13	; 19
 112:	f5 01       	movw	r30, r10
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0xa4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 118:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 11a:	d9 f7       	brne	.-10     	; 0x112 <main+0xa2>
            // our charlieplexed LED system understands
            _delay_ms(500);
            PORTB = 0x00;
 11c:	18 ba       	out	0x18, r1	; 24
 11e:	c3 01       	movw	r24, r6
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0xb0>
        // Store this move into memory. First shift rand over and only take the
        // two most significant bits.
        moves[counter] = 0x01 << (random >> 13);
        
        
        for(i = 0; i <= counter; i++) {
 124:	0f 5f       	subi	r16, 0xFF	; 255
 126:	1f 4f       	sbci	r17, 0xFF	; 255
 128:	e0 16       	cp	r14, r16
 12a:	f1 06       	cpc	r15, r17
 12c:	50 f7       	brcc	.-44     	; 0x102 <main+0x92>
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	97 e2       	ldi	r25, 0x27	; 39
 132:	f5 01       	movw	r30, r10
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <main+0xc2>
            // our charlieplexed LED system understands
            _delay_ms(500);
            PORTB = 0x00;
            _delay_ms(100);
        }
        counter += 1;
 13c:	08 94       	sec
 13e:	e1 1c       	adc	r14, r1
 140:	f1 1c       	adc	r15, r1
 142:	c1 cf       	rjmp	.-126    	; 0xc6 <main+0x56>

00000144 <__mulhi3>:
 144:	55 27       	eor	r21, r21
 146:	00 24       	eor	r0, r0

00000148 <__mulhi3_loop>:
 148:	80 ff       	sbrs	r24, 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__mulhi3_skip1>
 14c:	06 0e       	add	r0, r22
 14e:	57 1f       	adc	r21, r23

00000150 <__mulhi3_skip1>:
 150:	66 0f       	add	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	61 15       	cp	r22, r1
 156:	71 05       	cpc	r23, r1
 158:	21 f0       	breq	.+8      	; 0x162 <__mulhi3_exit>
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	99 f7       	brne	.-26     	; 0x148 <__mulhi3_loop>

00000162 <__mulhi3_exit>:
 162:	95 2f       	mov	r25, r21
 164:	80 2d       	mov	r24, r0
 166:	08 95       	ret

00000168 <__udivmodhi4>:
 168:	aa 1b       	sub	r26, r26
 16a:	bb 1b       	sub	r27, r27
 16c:	51 e1       	ldi	r21, 0x11	; 17
 16e:	07 c0       	rjmp	.+14     	; 0x17e <__udivmodhi4_ep>

00000170 <__udivmodhi4_loop>:
 170:	aa 1f       	adc	r26, r26
 172:	bb 1f       	adc	r27, r27
 174:	a6 17       	cp	r26, r22
 176:	b7 07       	cpc	r27, r23
 178:	10 f0       	brcs	.+4      	; 0x17e <__udivmodhi4_ep>
 17a:	a6 1b       	sub	r26, r22
 17c:	b7 0b       	sbc	r27, r23

0000017e <__udivmodhi4_ep>:
 17e:	88 1f       	adc	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	5a 95       	dec	r21
 184:	a9 f7       	brne	.-22     	; 0x170 <__udivmodhi4_loop>
 186:	80 95       	com	r24
 188:	90 95       	com	r25
 18a:	bc 01       	movw	r22, r24
 18c:	cd 01       	movw	r24, r26
 18e:	08 95       	ret

00000190 <__eerd_word_tn85>:
 190:	a8 e1       	ldi	r26, 0x18	; 24
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	42 e0       	ldi	r20, 0x02	; 2
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <__eerd_blraw_tn85>

0000019a <__eewr_word_tn85>:
 19a:	12 d0       	rcall	.+36     	; 0x1c0 <__eewr_byte_tn85>
 19c:	27 2f       	mov	r18, r23
 19e:	11 c0       	rjmp	.+34     	; 0x1c2 <__eewr_r18_tn85>

000001a0 <__eerd_block_tn85>:
 1a0:	dc 01       	movw	r26, r24
 1a2:	cb 01       	movw	r24, r22

000001a4 <__eerd_blraw_tn85>:
 1a4:	fc 01       	movw	r30, r24
 1a6:	e1 99       	sbic	0x1c, 1	; 28
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <__eerd_blraw_tn85+0x2>
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <__eerd_blraw_tn85+0x14>
 1ac:	ff bb       	out	0x1f, r31	; 31
 1ae:	ee bb       	out	0x1e, r30	; 30
 1b0:	e0 9a       	sbi	0x1c, 0	; 28
 1b2:	31 96       	adiw	r30, 0x01	; 1
 1b4:	0d b2       	in	r0, 0x1d	; 29
 1b6:	0d 92       	st	X+, r0
 1b8:	41 50       	subi	r20, 0x01	; 1
 1ba:	50 40       	sbci	r21, 0x00	; 0
 1bc:	b8 f7       	brcc	.-18     	; 0x1ac <__eerd_blraw_tn85+0x8>
 1be:	08 95       	ret

000001c0 <__eewr_byte_tn85>:
 1c0:	26 2f       	mov	r18, r22

000001c2 <__eewr_r18_tn85>:
 1c2:	e1 99       	sbic	0x1c, 1	; 28
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <__eewr_r18_tn85>
 1c6:	1c ba       	out	0x1c, r1	; 28
 1c8:	9f bb       	out	0x1f, r25	; 31
 1ca:	8e bb       	out	0x1e, r24	; 30
 1cc:	2d bb       	out	0x1d, r18	; 29
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	e2 9a       	sbi	0x1c, 2	; 28
 1d4:	e1 9a       	sbi	0x1c, 1	; 28
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
